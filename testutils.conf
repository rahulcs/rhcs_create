##########################
# This file contains all variables used by "play"
##########################

# Version of testutils
std_version=1.0.b27

# Booleen value indicating whether the script has
# ever been run before
initial="0"

# Integer indicating what revision this testutils
# is running. If other hosts in this setup have
# a higher value, this test utils will copy over
# that hosts testutils.conf file
rev_lvl=0

# SMclient version
sm_client_version=`rpm -qa | grep SMclient`

# current path
cur_w_dir=`pwd`

# Boolean indicating if IO is running
io_started="0"

# Network name
# Ex: "172.22."
std_network="135.15"

# Setup name: set by script
# Ex: "host1-host2-host3-..."
std_setup="---"

# Host IP addresses separated by commas
# Ex: "10.0.0.1,10.0.0.2,10.0.0.3..."
std_host_ip="135.24.205.71,135.24.205.72,135.24.205.73,135.24.205.74"

# Host names separated by commas
# Ex: "deer"
std_host_name=",,,"

# Moxa Ports. Must be filled in to enable debug
std_moxa_ipa=""
std_moxa_ipb=""

# LinuxSmash IO queue depth
std_queue_depth="64"

# target file or "t" file. This file contains
# what targets to run IO to
std_datfile=t

# Where to save output of devices in raw form
# Currently hold output of 
# SMdevices (mpp)
# multipath -ll (dmmp)
std_device_output="logs/devices.out"

# Signifies whether to put the array in debug
# if an error occurs
std_ctlr_debug="off"

# Tells IO whether to open a window that tails
# the messages file
std_open_log="off"

# create a target file before starting IO
std_scan_target="raw"

# External Share drive (to exchange errors
std_share_drive="135.24.205.150:/home/Linux_Share"

# Directory to mount the external share
std_mount_dir="/home/Linux_Share"

# what file to check for if another host errors
std_checkfile=$std_mount_dir/checkfile/$std_setup.txt  

# This file is created if the local host errors 
std_local_checkfile=./logs/$std_setup.txt

# testutils start time
std_start_date=`date +%m%d%y%H%M%S`

# what directory ssh will put all known hosts
std_ssh_dir=/root/.ssh/

# the master log file
std_master_log="testutils"

# time(seconds) between checking local system activity during IO
std_monitor_system_time=10

# search these messages in /var/log/messages. If any of these messages
# occur, then the monitor will fail
std_error_messages="scsi abort,Controller IO time expired"

# Failover type. Currently supports "mpp or "dmmp"
std_failover_type="mpp"

# How long to wait if a host is not responding (hung)
std_host_response_timeout=60

# How long to wait if a host is not responding (hung)
std_fs_io="\.tmp"

# How long to wait if a host is not responding (hung)
std_fs_count=2

# Update file to check for updates (upgreyedd).
std_update_file=.update

# Update folder to check for updates (upgreyedd).
std_update_folder=$std_mount_dir/applications/linux/automation/testutils

# Defines how verbose the master log file is
# 0 - only errors
# 1 - errors, warnings
# 2 - errors, warnings, and relavent notes
# 3 - errors, warnings, all notes
std_err_lvl=3

# std_port defines for playlite what port to run LinuxSmash on if there are multiple instances
std_port=1116

# std_target_cnt defines how many target files will be created if automatic target creation is enabled
std_target_cnt=1

# Dynamic variable that runs during setup ssh
# to test the ping status of all hosts
#(separated by commas)
# Ex: "1,0,1,1,0"
std_host_ping="1,"

# Nodefail Execution Time (hours)
std_nodefail_execution_time=24

# Dynamically sets variable between hosts for start/stop time (do not edit)
std_nodefail_start=0
std_nodefail_end=1214494935

# Retry count for Node Failure. A single try fails if the host is still pingable
std_nodefail_retry=10

# How long to sleep between failures
std_nodefail_sleep_time=1200

# Max time to wait for host to return before failing
std_nodefail_host_up_timeout=1200

# Dynamically sets variable for number of reboots (do not edit)
std_nodefail_count=7

# Set if the user wants to enter host(s) by name or ip (do not edit)
std_by_name=1

# Cluster Nodes (do not edit)
clus_node1=`hostname`
clus_node2=zeppo

# Which disk file to use
clus_disk=logs/disk

# Where to find cluster scripts/files (from testutils
#clus_dir="release/cluster"

# Where mount point information is saved
clus_mount_points="logs/mount.points"

# Where the LifeKeeper log file is created if there is a failure
# during resource creation
clus_lk_create_fail="logs/lk_create.txt"

# Retry for cluster resource creation
clus_retrycnt=4

# Failfast timer for Lifekeeper (retries)
clus_lk_failfast=50

# where the LifeKeeper bin directory is
clus_LKBIN=/opt/LifeKeeper/bin

# where the LifeKeeper resource bin is
clus_GENAPPBIN=/opt/LifeKeeper/lkadm/subsys/gen/app/bin

# LifeKeeper admin bin
clus_LKADMBIN=/opt/LifeKeeper/lkadm/bin

# LifeKeeper file system bin
clus_FSBIN=/opt/LifeKeeper/lkadm/subsys/gen/filesys/bin

# LifeKeeper perl location
clus_PERL=/opt/LifeKeeper/bin/perl

# LifeKeeper associated scripts (located in clus_dir)
clus_copycomp="copycomp.sh"
clus_manage_script="manage_serv.sh"
clus_restore_script="clus_restore.sh"
clus_remove_script="clus_remove.sh"
clus_check_script="quickCheck.pl"

# The "Large" File that will be copied back and forth (located in clus_dir)
clus_copyfile=bigfile

# Log created when monitoring resource creation
clus_monitor_log=logs/hier_monitor.log

# How often the LifeKeeper Monitor rescans (in seconds)
clus_check_interval=10

# Resource Timeout when the Resource Monitor is running (in seconds)
clus_res_timeout=120

# If the alternate host is unreachable during LifeKeeper Monitor (do not set)
clus_alt_host_halt=0

# Export IP's for RHCS (do not set)
clus_export_ip1=""
clus_export_ip2=""

# Name of the volume groupp associated with the logical volume manager
#clus_lvm="lvm_vg"


